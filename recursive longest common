import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'longestCommonSubsequence' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY a
     *  2. INTEGER_ARRAY b
     */

    public static List<Integer> longestCommonSubsequence(List<Integer> a, List<Integer> b) {
        // Write your code here
        return longestCommonSubsequenceRecursiveHelper(a, b, a.size(), b.size());
    }

    private static List<Integer> longestCommonSubsequenceRecursiveHelper(List<Integer> a, List<Integer> b, int m, int n) {
        List<Integer> lcs = new ArrayList<>();
        if (m == 0 || n == 0) {
            return lcs;
        }
        if (a.get(m - 1).equals(b.get(n - 1))) {
            lcs = longestCommonSubsequenceRecursiveHelper(a, b, m - 1, n - 1);
            lcs.add(a.get(m - 1));
        } else {
            List<Integer> lcs1 = longestCommonSubsequenceRecursiveHelper(a, b, m - 1, n);
            List<Integer> lcs2 = longestCommonSubsequenceRecursiveHelper(a, b, m, n - 1);
            lcs = (lcs1.size() > lcs2.size()) ? lcs1 : lcs2;
        }
        return lcs;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        String[] aTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> a = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            int aItem = Integer.parseInt(aTemp[i]);
            a.add(aItem);
        }

        String[] bTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> b = new ArrayList<>();

        for (int i = 0; i < m; i++) {
            int bItem = Integer.parseInt(bTemp[i]);
            b.add(bItem);
        }

        List<Integer> result = Result.longestCommonSubsequence(a, b);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(String.valueOf(result.get(i)));

            if (i != result.size() - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
