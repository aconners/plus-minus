import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'maxSubarray' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    // Recursive solution
    public static List<Integer> maxSubarray(List<Integer> arr) {
        List<Integer> result = new ArrayList<>();
        result.add(maxSubarraySum(arr)); // Maximum subarray sum
        result.add(maxSubsequenceSum(arr)); // Maximum subsequence sum
        return result;
    }
    
    // Helper function to calculate maximum subarray sum using Kadane's algorithm
    private static int maxSubarraySum(List<Integer> arr) {
        int maxEndingHere = arr.get(0);
        int maxSoFar = arr.get(0);
        
        for (int i = 1; i < arr.size(); i++) {
            maxEndingHere = Math.max(arr.get(i), maxEndingHere + arr.get(i));
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }
        
        return maxSoFar;
    }
    
    // Helper function to calculate maximum subsequence sum
    private static int maxSubsequenceSum(List<Integer> arr) {
        int maxSum = 0;
        boolean hasPositive = false;
        int maxNegative = Integer.MIN_VALUE;
        
        for (int num : arr) {
            if (num > 0)
                maxSum += num;
            else if (num <= 0) {
                if (num > maxNegative)
                    maxNegative = num;
            }
            
            if (num > 0)
                hasPositive = true;
        }
        
        if (!hasPositive)
            maxSum = maxNegative;
        
        return maxSum;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        for (int tItr = 0; tItr < t; tItr++) {
            int n = Integer.parseInt(bufferedReader.readLine().trim());

            String[] arrTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            List<Integer> arr = new ArrayList<>();

            for (int i = 0; i < n; i++) {
                int arrItem = Integer.parseInt(arrTemp[i]);
                arr.add(arrItem);
            }

            List<Integer> result = Result.maxSubarray(arr);

            for (int i = 0; i < result.size(); i++) {
                bufferedWriter.write(String.valueOf(result.get(i)));

                if (i != result.size() - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}
