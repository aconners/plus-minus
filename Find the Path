import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    public static List<Integer> shortestPath(List<List<Integer>> a, List<List<Integer>> queries) {
        List<Integer> result = new ArrayList<>();
        int n = a.size(); // Number of rows
        int m = a.get(0).size(); // Number of columns

        for (List<Integer> query : queries) {
            int startRow = query.get(0) - 1; // Adjust to 0-indexed
            int startCol = query.get(1) - 1; // Adjust to 0-indexed
            int endRow = query.get(2) - 1; // Adjust to 0-indexed
            int endCol = query.get(3) - 1; // Adjust to 0-indexed

            // Check for out-of-bounds coordinates
            if (startRow < 0 || startRow >= n || startCol < 0 || startCol >= m ||
                endRow < 0 || endRow >= n || endCol < 0 || endCol >= m) {
                result.add(-1);
                continue;
            }

            boolean[][] visited = new boolean[n][m];
            int[][] distance = new int[n][m];

            Queue<int[]> queue = new LinkedList<>();
            queue.offer(new int[]{startRow, startCol});
            visited[startRow][startCol] = true;

            int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}; // Up, Down, Left, Right

            while (!queue.isEmpty()) {
                int[] curr = queue.poll();
                int currRow = curr[0];
                int currCol = curr[1];

                if (currRow == endRow && currCol == endCol) {
                    result.add(distance[currRow][currCol]);
                    break;
                }

                for (int[] dir : directions) {
                    int nextRow = currRow + dir[0];
                    int nextCol = currCol + dir[1];

                    if (nextRow >= 0 && nextRow < n && nextCol >= 0 && nextCol < m && !visited[nextRow][nextCol] && a.get(nextRow).get(nextCol) == 0) {
                        visited[nextRow][nextCol] = true;
                        distance[nextRow][nextCol] = distance[currRow][currCol] + 1;
                        queue.offer(new int[]{nextRow, nextCol});
                    }
                }
            }

            if (queue.isEmpty()) {
                result.add(-1); // No path exists
            }
        }

        return result;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().split(" ");
        int n = Integer.parseInt(firstMultipleInput[0]);
        int m = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> a = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            String[] aRowItems = bufferedReader.readLine().split(" ");
            List<Integer> aRow = new ArrayList<>();

            for (int j = 0; j < m; j++) {
                int aItem = Integer.parseInt(aRowItems[j]);
                aRow.add(aItem);
            }

            a.add(aRow);
        }

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> queries = new ArrayList<>();

        for (int i = 0; i < q; i++) {
            String[] queriesRowItems = bufferedReader.readLine().split(" ");
            List<Integer> queryRow = new ArrayList<>();

            for (int j = 0; j < 4; j++) {
                int queryItem = Integer.parseInt(queriesRowItems[j]);
                queryRow.add(queryItem);
            }

            queries.add(queryRow);
        }

        List<Integer> result = Result.shortestPath(a, queries);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(String.valueOf(result.get(i)));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
